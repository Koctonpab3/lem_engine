/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package analyser;

import analyser.simpleclasses.Timer;
import analyser.simpleclasses.simplesentences;
import analyser.simpleclasses.simplewords;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import analyser.org.tartarus.snowball.SnowballStemmer;
import analyser.simpleclasses.sentences;
import analyser.simpleclasses.words;
import java.io.FileWriter;
import static java.lang.Math.abs;
import javax.swing.JOptionPane;
import ru.narod.macrocosm.mcr.Ray;

/**
 *
 * @author Admin
 */
public class SecondWindow extends javax.swing.JFrame {
             String FileName = new String();
             String FileNameExeption = new String();
             int metod=0,m=0,n=0;
             boolean flagStem=false
                     ,flagLemma=false
                     ,flagStopSlova=false
                     ,flagPredloj=false
                     ,flagNeu4it4R=false
                     ,flagOpred4R=false
                     ,flagU4it4R=false
                     ,flagOknoMN=false;
             
             simplesentences allsents = new simplesentences();
             simplewords allwords = new simplewords();
             simplewords allwordscopy = new simplewords();
             simplewords stopwords = new simplewords();
             simplewords allunicalWrds = new simplewords();
             words unicWords = new words();
             words wrdsSrtByPorog=new words();
             
             Timer TimermS = new Timer();
             Timer TimerAll = new Timer();
    /**
     * Creates new form SecondWindow
     */
   public SecondWindow(String FileName,
             String FileNameExeption,
                    boolean flagStem,
                    boolean flagLemma,
                    boolean flagStopSlova,
                    boolean flagPredloj,
                    boolean flagNeu4it4R,
                    boolean flagOpred4R,
                    boolean flagU4it4R,
                    boolean flagOknoMN,
                    int metod,
                    int m,
                    int n){
               
             this.FileName = FileName;
             this.FileNameExeption = FileNameExeption;
             this.flagStem=flagStem;
             this.flagLemma=flagLemma;
             this.flagStopSlova=flagStopSlova;
             this.flagPredloj=flagPredloj;
             this.flagNeu4it4R=flagNeu4it4R;
             this.flagOpred4R=flagOpred4R;
             this.flagU4it4R=flagU4it4R;
             this.flagOknoMN=flagOknoMN;
             this.metod=metod;
             this.m=m;
             this.n=n;

     //initComponents();
    }
    
    public SecondWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jCheckBox1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Start Analyse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jEditorPane1);

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Сохранение промежуточных файлов");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jCheckBox1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
jEditorPane1.setText("Cleared");        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

TimerAll.startMsec();
                 try {
                     this.begin();
                     this.repaint();
                 } catch (IOException ex) {
                     Logger.getLogger(SecondWindow.class.getName()).log(Level.SEVERE, null, ex);
                 }

if(this.flagLemma==true){ 
    try {
        this.lematization();
    } catch (Throwable ex) {
        Logger.getLogger(SecondWindow.class.getName()).log(Level.SEVERE, null, ex);
    }
this.repaint();
}
if(this.flagStem==true){
    try {  
        this.stemming();
        this.repaint();
    } catch (Throwable ex) {
        Logger.getLogger(SecondWindow.class.getName()).log(Level.SEVERE, null, ex);
    }
}
if(this.flagStopSlova==true){
this.stopwords();  
this.repaint();
}

if(this.metod==0){
    this.metod1();
    this.repaint();
}

if(this.metod==1){
    this.metod2();
    this.repaint();
}
TimerAll.stopMsec();
this.print("ВЫПОЛНЕНИЕ ЗАВЕРШЕНО. ВРЕМЕНИ НА ВЫПОЛНЕНИЕ УШЛО: "
        +TimerAll.getMsec()+"сек. ");




        
// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
public void begin() throws IOException{
this.print("--------------------");    
this.print("НАЧАЛО ОБРАБОТКИ:");
this.print("--------------------"); 
Timer TimerOpn= new Timer();
Timer TimerOpnErrWrds= new Timer();
TimerOpn.startMsec();
//Открытие файла.

       
        BufferedReader reader;
                 try {
                     reader = new BufferedReader(new FileReader(this.FileName));
                
        String line;
        LinkedList<String> buf = new LinkedList<>();
                
        while ((line = reader.readLine()) != null) {
        buf.clear();
            String senc="";
        senc=this.getNormalText(line);
        this.copyLinkedList(this.allsents.sentsToList(senc), buf);
      
        for(int i=0;i<buf.size();i++){
        this.allsents.addSentence(buf.get(i));

        }
    
     } 
      //  System.out.println("words:"+this.allsents.wordsToListFromAllSents().size());
        this.allwords.addWords(this.allsents.wordsToListFromAllSents());
        this.allwords.toLowCase();
        this.allwords.remWordsOfSize(2);
      TimerOpn.stopMsec();  
    this.print("Предложений в тексте: " +this.allsents.getSize());
    this.print("Слов в тексте: " +this.allwords.getSize());
      
      
      if (this.flagStopSlova){
      TimerOpnErrWrds.startMsec();
      
       BufferedReader reader1;
                 
                     reader1 = new BufferedReader(new FileReader(this.FileNameExeption));
                
        String line1;
                
        while ((line1 = reader1.readLine()) != null) {
       
        stopwords.addWords(this.allsents.wordsToList(line1));
        }
       this.print("Стоп слов: " +this.stopwords.getSize());
      TimerOpnErrWrds.stopMsec();
      }          
                 } catch (FileNotFoundException ex) {
                     Logger.getLogger(SecondWindow.class.getName()).log(Level.SEVERE, null, ex);
                 } 
        


this.print("Время на открытие файла: "+TimerOpn.getMsec()+"c.");
if(this.flagStopSlova)this.print("Время на открытие файла стоп слов: "+TimerOpnErrWrds.getMsec()+"c.");
}

public void lematization() throws Throwable{
 this.print("------------------------");
 this.print("Выполнение лематизации:"); 
// this.print("------------------------"); 
this.TimermS.resetAll();
this.TimermS.startMsec();
//Выполнение лематизации.
int max=this.allwords.getSize();
for(int i=0;i<max;i++){
this.allwords.replaceWord(this.NormalForm(this.allwords.getWord(i)),i);

System.out.println("Lematiz_wrds :"+(i*100/max)+"%");
}
        
         simplewords tmpwrds = new simplewords();
        for(int i=0;i<this.allsents.getSize();i++){
            System.out.println("Lematiz_snts :"+(i*100/this.allsents.getSize())+"%");
        tmpwrds.clearWords();
        tmpwrds.addWords(this.allsents.getCalculateWordsOfText(i));

//gngnht;
        String newSent="";
        for(int a=0;a<tmpwrds.getSize();a++){newSent=newSent+" "+NormalForm(tmpwrds.getWord(a));}
        //newSent=newSent+".";
        this.allsents.replaceSentence(newSent, i);
        }

if (this.flagStopSlova & this.stopwords.getSize()>0){
for(int i=0;i<this.stopwords.getSize();i++){
this.stopwords.replaceWord(NormalForm(this.stopwords.getWord(i)),i);
}
}

this.TimermS.stopMsec();
this.print("Время на выполнение лемматизации: "+this.TimermS.getMsec()+"c.");
    
}

public void stemming() throws Throwable{
    this.print("---------------------");
    this.print("Выполнение стеминга"); 
  //  this.print("---------------------"); 
this.TimermS.resetAll();
this.TimermS.startMsec();
//Выполнение стемминга.
for (int i=0;i<this.allwords.getSize();i++){
this.allwords.replaceWord(this.stemm(this.allwords.getWord(i).toLowerCase()), i);
}
if(this.flagStopSlova & this.stopwords.getSize()>0){
for (int i=0;i<this.allwords.getSize();i++){
this.allwords.replaceWord(this.stemm(this.allwords.getWord(i).toLowerCase()), i);
}
}

  simplewords tmpwrds = new simplewords();
        for(int i=0;i<this.allsents.getSize();i++){
            System.out.println("stemm_snts :"+(i*100/this.allsents.getSize())+"%");
        tmpwrds.clearWords();
        tmpwrds.addWords(this.allsents.getCalculateWordsOfText(i));

//gngnht;
        String newSent="";
        for(int a=0;a<tmpwrds.getSize();a++){newSent=newSent+" "+this.stemm(tmpwrds.getWord(a));}
        //newSent=newSent+".";
        this.allsents.replaceSentence(newSent, i);
        }


this.TimermS.stopMsec();
this.print("Время на выполнение стемминга: "+this.TimermS.getMsec()+"c.");
}

public void stopwords(){
    this.print("---------------------"); 
    this.print("Удаление стоп слов:"); 
 //   this.print("---------------------"); 
    if (this.stopwords.getSize()>0){
this.TimermS.resetAll();
this.TimermS.startMsec();
//Выполнение метода 1.
//injonin;

      //  this.allwords.clearWords();
        simplewords tmpwrds = new simplewords();
        for(int i=0;i<this.allsents.getSize();i++){
        tmpwrds.clearWords();
        tmpwrds.addWords(this.allsents.getCalculateWordsOfText(i));
        
        
        for(int i1=0;i1<this.stopwords.getSize();i1++){
        for(int i2=0;i2<tmpwrds.getSize();i2++){
        if (stopwords.getWord(i1).equalsIgnoreCase(tmpwrds.getWord(i2))){
        tmpwrds.replaceWord("---", i2);
        }
        }

        int j=0;
        while(j<tmpwrds.getSize()-1){
        if(!tmpwrds.getWord(j).equalsIgnoreCase("---"))j++;
        if(tmpwrds.getWord(j).equalsIgnoreCase("---")){    
         tmpwrds.remWord(j);
            if(j>=tmpwrds.getSize())j=tmpwrds.getSize()-1;
        }}
        String newSent="";
        for(int a=0;a<tmpwrds.getSize();a++){newSent=newSent+" "+tmpwrds.getWord(a);}
        //newSent=newSent+".";
        this.allsents.replaceSentence(newSent, i);
        }
        
         for(int f=0;f< this.stopwords.getSize();f++){
            for(int f1=this.allwords.getSize();f1>=0;f1--){
      if(this.equals(this.stopwords.getWord(f), this.allwords.getWord(f1))){
      this.allwords.remWord(f1);}
         }
         }
        }
      
      //   for(int i=0;i< this.allsents.getSize();i++){
      //   this.print("___Sent: "+ this.allsents.getSentence(i));
      //   }
this.print("Слов в тексте после удаления стоп слов: "+this.allwords.getSize());
this.TimermS.stopMsec();
this.print("Время на удаление стоп слов: "+this.TimermS.getMsec()+"c.");
}}

public void metod1(){
    this.print("-----------------------------");
    this.print("Начало обработки методом 1:"); 
 //   this.print("-----------------------------"); 
    Timer TM1 = new Timer();
TM1.resetAll();
TM1.startMsec();
//Выполнение метода 1.
this.normalFormOfWords();
this.selectPorog();
this.metod1_ras4et();


TM1.stopMsec();
this.print("Время на выполнение метода: "+TM1.getMsec()+"c.");
}
public void normalFormOfWords(){
    this.print("-----------------------------");
    this.print("Расчет уникальных слов и частоты встречаний в тексте:"); 
 //   this.print("-----------------------------"); 
this.TimermS.resetAll();
this.TimermS.startMsec();
//Выполнение метода 1.
//System.out.println("a");
this.allwordscopy.addWords(this.allwords.getAllWords());
simplewords tmpwords= new simplewords();
tmpwords.addWords(this.allwords.getAllWords());
//System.out.println("b");
//System.out.println("size:"+this.allwords.getSize());


tmpwords.delDuplicateWords();
//System.out.println("c");


if(this.flagOpred4R|this.flagU4it4R){
  
    Timer t1 = new Timer();
    t1.startMsec();
     this.print("Выяснение пренадлежности слов к частям речи."); 
    for(int i=0;i<tmpwords.getSize();i++){
    this.unicWords.addWord(tmpwords.getWord(i),
            this.allwordscopy.calculateFreq(tmpwords.getWord(i)),
            FormOfWord(tmpwords.getWord(i)));
            }
    t1.stopMsec();
    String time=t1.getMsec();
    this.print("Время на выяснение пренадлежности слов к частям речи:"+
            time+"сек."); 
    this.unicWords.sortByIndex();
//if(this.jCheckBox1.isSelected()){
    this.print("Сохранение в файл слов с частотой"); 
    t1.resetAll();
    t1.startMsec();
String fileOut1=FileName.substring(0, FileName.length()-4)
                    +" частота всех слов текста"
                    +FileName.substring( FileName.length()-4);
            File file1 = new File(fileOut1);
            file1.delete();
                        for(int i=0;i<this.unicWords.getSize();i++){
            this.write(fileOut1,this.unicWords.getWord(i) 
            +" "+this.unicWords.getFreq(i)
                    +" "+this.unicWords.getPartOfSpeech(i)+"\n"
                     );
}
this.print("Время на cохранение в файл слов с частотой:"+
            time+"сек."); 
}
//}
this.print("Уникальных слов в тексте: "+this.unicWords.getSize());
if(this.flagNeu4it4R){
    
    for(int i=0;i<tmpwords.getSize();i++){
    this.unicWords.addWord(tmpwords.getWord(i),
            this.allwordscopy.calculateFreq(tmpwords.getWord(i)));
            }
    this.unicWords.sortByIndex();
    this.print("Унакальных слов в тексте: "+this.unicWords.getSize());
//if(this.jCheckBox1.isSelected()){
        this.print("Сохранение в файл слов с частотой"); 
    Timer t1 =new Timer();
    t1.startMsec();
String fileOut1=FileName.substring(0, FileName.length()-4)
                    +" частота всех слов текста"
                    +FileName.substring( FileName.length()-4);
            File file1 = new File(fileOut1);
            file1.delete();
                        for(int i=0;i<this.unicWords.getSize();i++){
            this.write(fileOut1,this.unicWords.getWord(i) 
            +" "+this.unicWords.getFreq(i)+"\n"
                     );
}
t1.stopMsec();
String time=t1.getMsec();
this.print("Время на cохранение в файл слов с частотой:"+
            time+"сек."); 
}
//}

this.TimermS.stopMsec();
this.print("Время на расчет уникальных слов и частоты: "+this.TimermS.getMsec()+"c.");
}

public void selectPorog(){

this.print("Выбор слов по порогу частот.");

Timer tin = new Timer();
tin.startMsec();
        
             String Porog1= JOptionPane.showInputDialog(
                    "Please input porog 1 min: ");
            String Porog2= JOptionPane.showInputDialog(
                    "Please input porog 2 max: ");
tin.stopMsec();
this.print("Время на ввод пользователем: "+tin.getMsec()+"c.");
            
this.TimermS.resetAll();
this.TimermS.startMsec();
            
//this.wrdsSrtByPorog.

            this.wrdsSrtByPorog=this.unicWords.getByFreq(
                    Double.valueOf(Porog1), Double.valueOf(Porog2));
            
            this.wrdsSrtByPorog.sortByIndex();
            
            this.print("Уникальных выбранных слов из текста: "
                    +this.wrdsSrtByPorog.getSize());
            
           // if(this.jCheckBox1.isSelected()){
        this.print("Сохранение в файл диапазона слов с частотой"); 
    Timer t1 =new Timer();
    t1.startMsec();
  if(this.flagNeu4it4R){  
String fileOut1=FileName.substring(0, FileName.length()-4)
                    +" частота выбранных слов текста "
                    +FileName.substring( FileName.length()-4);
            File file1 = new File(fileOut1);
            file1.delete();
                        for(int i=0;i<this.wrdsSrtByPorog.getSize();i++){
            this.write(fileOut1,this.wrdsSrtByPorog.getWord(i) 
            +" "+this.wrdsSrtByPorog.getFreq(i)+"\n"
                     );
}}
   if(this.flagOpred4R|this.flagU4it4R){  
String fileOut1=FileName.substring(0, FileName.length()-4)
                    +" частота выбранных слов текста "
                    +FileName.substring( FileName.length()-4);
            File file1 = new File(fileOut1);
            file1.delete();
                        for(int i=0;i<this.wrdsSrtByPorog.getSize();i++){
            this.write(fileOut1,this.wrdsSrtByPorog.getWord(i) 
            +" "+this.wrdsSrtByPorog.getFreq(i)
                    +" "+this.wrdsSrtByPorog.getPartOfSpeech(i)+"\n"
                     );
}}                       
                        
                        
t1.stopMsec();
String time=t1.getMsec();
this.print("Время на cохранение в файл диапазона слов с частотой:"+
            time+"сек."); 
//}
            
            
this.TimermS.stopMsec();
this.print("Завершение выбора по порогу частот : "+this.TimermS.getMsec()+" c.");
}

public void metod1_ras4et(){
Timer tmr1 = new Timer();
tmr1.startMsec();
this.print("Расчет начального коэфициента к каждому слову,"
        + " поиск связанных с ним предложений, частоты слов в предложениях для "
        + "слов из выбранного диапазона:");
this.print("..0%");


  int max =wrdsSrtByPorog.getSize();

 LinkedList<words> FreqWrds = new LinkedList<>();
 LinkedList<sentences> FreqSnts = new LinkedList<>();
 //this.print("Progress of calculate 1st koef: % \n 0%");
 
 
  for(int i=0;i<max;i++)  {
      LinkedList<String> bufferSen=new LinkedList<>();
      sentences bufSnts=new sentences();
  //    System.out.println("A ");
   // sentInText.getSearchSentences(wrdsSrtByPorog.getWord(i),bufferSen );
this.copyLinkedList(
        this.allsents.getSentencesWithWordLL(this.wrdsSrtByPorog.getWord(i)), 
        bufferSen);
//  System.out.println("B");
  //  System.out.println("bufferSen "+bufferSen);
    bufSnts.setSentence(bufferSen);
   // System.out.println("FreqSnts ");
    bufSnts.setGenerWord(wrdsSrtByPorog.getWord(i));
    FreqSnts.add(bufSnts);
    

    words bufWrds=new words();
    bufWrds.setWords(FreqSnts.get(i).wordsToList());
    bufWrds.calculateFreq();
    
    bufWrds.setGenerWord(wrdsSrtByPorog.getWord(i));
    
    //fv;
 
   if (this.jCheckBox1.isSelected()){
      String fileOut3=FileName.substring(0, FileName.length()-4)
                    +" "+bufSnts.getGenerWord()
                    +" его предложения текста "
                    +FileName.substring( FileName.length()-4);
      File file3 = new File(fileOut3);
       file3.delete();
            
        for(int k=0;k<bufSnts.getSize();k++){
            this.write(fileOut3,bufSnts.getSentence(k)+"\n"
                     );
            }     
        
   }
   
       bufWrds.delDuplicateWords();
       bufWrds.sortByIndex();
       
       
       
 if (this.jCheckBox1.isSelected()){      
        String fileOut4=FileName.substring(0, FileName.length()-4)
                    +" "+bufSnts.getGenerWord()
                    +" частота слов в его предлож "
                    +FileName.substring( FileName.length()-4);
      File file4 = new File(fileOut4);
       file4.delete();
            
        for(int k=0;k<bufWrds.getSize();k++){
            this.write(fileOut4,bufWrds.getWord(k)
                    +" "+bufWrds.getFreq(k)+"\n"
                     );}
 }
        
        
        for(int k=0;k<bufWrds.getSize();k++){
        Double 
                old=this.unicWords.getFreq(bufWrds.getWord(k))
                ,nnn=bufWrds.getFreq(k)
                ,result=nnn/old;
            
          /*       System.out.println(
           // "word:"+bufWrds.getWord(k)+
            "old:"+old+"\n"+
            "nnn:"+nnn+"\n"+
            "result:"+result+"\n"+
            "k:"+k+"\n"+ 
              "word:"+bufWrds.getWord(k) //+ 
            //  "sumREV:"+sumTotalR       
    );*/
                 
            bufWrds.setFreq(k,result);
 
        }
        
        bufWrds.sortByIndex();
        bufWrds.delDuplicateWords();
       bufWrds.remWord(bufWrds.getGenerWord());
       bufWrds.remWord("---");
        
 if (this.jCheckBox1.isSelected()){       
               String fileOut5=FileName.substring(0, FileName.length()-4)
                    +" "+bufSnts.getGenerWord()
                    +" 1й коэф слов в его предлож "
                    +FileName.substring( FileName.length()-4);
      File file5 = new File(fileOut5);
       file5.delete();
        
       //pod voprosom
            // bufWrds.sortByIndex();
        for(int k=0;k<bufWrds.getSize();k++){
        this.write(fileOut5,bufWrds.getWord(k)
                    +" "+bufWrds.getFreq(k)+"\n"
                    ); }}
       //bufWrds.sortByIndex();
        FreqWrds.add(bufWrds);
        //FreqWrds.get(i).clear();
        FreqWrds.get(i).setWrdFrq(bufWrds.getWords(), bufWrds.getFrqs());
        FreqWrds.get(i).setGenerWord(bufWrds.getGenerWord());
        
        
   


//int procent=(i*100/max);

if(i==max/4)this.print("..25%");
if(i==max/2)this.print("..50%");
if(i==3*max/4)this.print("..75%");
if(i==max-1)this.print("..100% \n Расчет части вычислений окончен.");
//System.out.print("Progress ......."+procent+" % \n");
this.repaint();

jEditorPane1.paint(this.jEditorPane1.getGraphics());
jEditorPane1.repaint();
this.repaint();
   }        
 tmr1.stopMsec();
 this.print("Расчет завершен за: "+tmr1.getMsec()+"c.");
  
  Timer tmr2 = new Timer();
tmr2.startMsec();
this.print("Расчет силы связи к каждому слову: ");
this.print("..0%");
  ///////////////TUT///////////////
   LinkedList<words> finalIndexofWords=new LinkedList<>();
 words temp = new words(FreqWrds.size());
   
 // System.out.println(FreqWrds.size());
 int maxF=FreqWrds.size();
  for(int i=0;i<FreqWrds.size();i++){
      
      if(i==max/4)this.print("..25%");
if(i==maxF/2)this.print("..50%");
if(i==3*maxF/4)this.print("..75%");
if(i==maxF-1)this.print("..100% \n Расчет завершен :)");

this.repaint();

jEditorPane1.paint(this.jEditorPane1.getGraphics());
jEditorPane1.repaint();
this.repaint();
      
      finalIndexofWords.add(temp);
      finalIndexofWords.get(i).setGenerWord(FreqWrds.get(i).getGenerWord());
     
    //  System.out.println("Files1 "+finalIndexofWords.get(i).getGenerWord());
    
      
      //
      String fileOutF=FileName.substring(0, FileName.length()-4)
                    +" СИЛА СВЯЗИ СЛОВА_"
                    +finalIndexofWords.get(i).getGenerWord()
                    +FileName.substring( FileName.length()-4);
            File fileF = new File(fileOutF);
            fileF.delete();
        //    System.out.println("words in file:"+finalIndexofWords.get(i).getSize());
     
            words buferFin=new words();
       buferFin.clear();
       
        
       
      // System.out.println("FreqWrds.size() "+FreqWrds.size());
   
  for(int j=0;j<FreqWrds.size();j++){
      
       
  if(i!=j){
   
  Double bindForce=1.0;
  Double sumM1M2=0.0; //znamenatel
  Double sumTotal=0.0;//4islitel
  
  
  
   Double bindForceR=1.0;
  Double sumM1M2R=0.0; //znamenatel
  Double sumTotalR=0.0;//4islitel
  
  sumM1M2=FreqWrds.get(i).summAllFreq()+FreqWrds.get(j).summAllFreq();
  
  sumM1M2R=FreqWrds.get(j).summAllFreq()+FreqWrds.get(i).summAllFreq();
  
 
   Double M1,M2,M3,absM1M2;
  Double M1R,M2R,M3R,absM1M2R;
  
  M1=FreqWrds.get(i).summWordsFreq(FreqWrds.get(j).getWords());
  M2=FreqWrds.get(j).summWordsFreq(FreqWrds.get(i).getWords());
  absM1M2=abs(M1-M2);
  if(absM1M2<0)absM1M2=absM1M2*(-1);
  
    M1R=FreqWrds.get(j).summWordsFreq(FreqWrds.get(i).getWords());
  M2R=FreqWrds.get(i).summWordsFreq(FreqWrds.get(j).getWords());
  absM1M2R=abs(M1R-M2R);
  if(absM1M2R<0)absM1M2R=absM1M2R*(-1);
  
 // govno peredelat m3 error
  M3=FreqWrds.get(i).summNotWordsFreq(FreqWrds.get(j).getWords());
      sumTotal=absM1M2+M3;
      
   M3R=FreqWrds.get(j).summNotWordsFreq(FreqWrds.get(i).getWords());
      sumTotalR=absM1M2R+M3R;     
     
     /* System.out.println("word1:"+FreqWrds.get(i).getGenerWord()
      +" size1:"+ FreqWrds.get(i).getSize()
      +" worrd2:"+ FreqWrds.get(j).getGenerWord()
      +" size2:"+ FreqWrds.get(j).getSize()
      );
         System.out.println(
            "m1:"+M1+"\n"+
            "m2:"+M2+"\n"+
            "abs:"+(M1-M2)+"\n"+
            "m3:"+M3 +"\n"+ 
              "sumTo:"+sumTotal+ 
              "sumREV:"+sumTotalR       
    );*/
  
  
  /*
  tut dtariy metod
 // if(!strong){
  Double M1,M2,M3,absM1M2;
  Double M1R,M2R,M3R,absM1M2R;
  
  M1=FreqWrds.get(i).summWordsFreq(FreqWrds.get(j).getWords());
  M2=FreqWrds.get(j).summWordsFreq(FreqWrds.get(i).getWords());
  absM1M2=abs(M1-M2);
  if(absM1M2<0)absM1M2=absM1M2*(-1);
  
    M1R=FreqWrds.get(j).summWordsFreq(FreqWrds.get(i).getWords());
  M2R=FreqWrds.get(i).summWordsFreq(FreqWrds.get(j).getWords());
  absM1M2R=abs(M1R-M2R);
  if(absM1M2R<0)absM1M2R=absM1M2R*(-1);
  
 // govno peredelat m3 error
  M3=FreqWrds.get(i).summNotWordsFreq(FreqWrds.get(j).getWords());
      sumTotal=absM1M2+M3;
      
   M3R=FreqWrds.get(j).summNotWordsFreq(FreqWrds.get(i).getWords());
      sumTotalR=absM1M2R+M3R;     
     
      tut stariy metod
  /*    System.out.println("word1:"+FreqWrds.get(i).getGenerWord()
      +" worrd2:"+ FreqWrds.get(j).getGenerWord());
         System.out.println(
            "m1:"+M1+"\n"+
            "m2:"+M2+"\n"+
            "abs:"+(M1-M2)+"\n"+
            "m3:"+M3 +"\n"+ 
              "sumTo:"+sumTotal+ 
              "sumREV:"+sumTotalR       
    );
         
      
  }*/
    /*if(strong){
     Double M1,M2,M3,absM1M2;
     Double M1R,M2R,M3R,absM1M2R;
     
  M1=FreqWrds.get(i).summWordsFreq(FreqWrds.get(j).getWords());
  M2=FreqWrds.get(j).summWordsFreq(FreqWrds.get(i).getWords());
  absM1M2=abs(M1-M2);
  M3=FreqWrds.get(j).summNotWordsFreq(FreqWrds.get(i).getWords());
      sumTotal=absM1M2+M3;     

  M1R=FreqWrds.get(j).summWordsFreq(FreqWrds.get(i).getWords());
  M2R=FreqWrds.get(i).summWordsFreq(FreqWrds.get(j).getWords());
  absM1M2R=abs(M1R-M2R);
  M3R=FreqWrds.get(i).summNotWordsFreq(FreqWrds.get(j).getWords());
      sumTotalR=absM1M2R+M3R;      
      
  //}  
   
  bindForce=1-sumTotal/sumM1M2;
  bindForceR=1-sumTotalR/sumM1M2R;
  
  /* System.out.println(
            "sumTotal:"+sumTotal+"\n"+
            "sumM1M2:"+sumM1M2+"\n"+
            "bindForce:"+bindForce+
            " bindForceREV:"+bindForceR  );*/
  bindForce=1-sumTotal/sumM1M2;
  bindForceR=1-sumTotalR/sumM1M2R;
  finalIndexofWords.get(i).CreateFreqRev();
  finalIndexofWords.get(i).setFreq(j, bindForce);
  finalIndexofWords.get(i).setWord(j,FreqWrds.get(j).getGenerWord());
  finalIndexofWords.get(i).setFreqRev(j, bindForceR);
 //////////123
  buferFin.addWord(finalIndexofWords.get(i).getWord(j),
          finalIndexofWords.get(i).getFreq(j),
          finalIndexofWords.get(i).getFreqRev(j));
  
  
  }
  }
      if (this.flagNeu4it4R){
   buferFin.sortByIndex();
   for(int h=0;h<buferFin.getSize();h++)
    this.write(fileOutF,
                    buferFin.getWord(h) 
            +" "+ buferFin.getFreq(h)
                      +" "+ buferFin.getFreqRev(h)
                            +"\n"
                     );
   
  }
   if (!this.flagNeu4it4R){
   buferFin.sortByIndexWithREV();
   for(int h=0;h<buferFin.getSize();h++)
    this.write(fileOutF,
                    buferFin.getWord(h) 
            +" "+ buferFin.getFreq(h)
                      +" "+ buferFin.getFreqRev(h)
                            +" "+ this.unicWords.getPartOfSpeech(buferFin.getWord(h))+"\n"
                     );
   
  }
  }

tmr2.stopMsec();
this.print("Время на выполнение подсчета силы связи: "+tmr2.getMsec()+"c.");
}

public void metod2(){
   this.print("-----------------------------");
    this.print("Начало обработки методом 2:"); 
 //   this.print("-----------------------------"); 
    Timer TM1 = new Timer();
TM1.resetAll();
TM1.startMsec();
//Выполнение метода 1.
this.normalFormOfWords();
this.selectPorog();
this.metod2_ras4et();


TM1.stopMsec();
this.print("Время на выполнение метода: "+TM1.getMsec()+"c.");
}
public void metod2_ras4et(){
Timer tmr1 = new Timer();
tmr1.startMsec();
this.print("Поиск к каждому слову связанных с ним предложений,вырезание промежутка "
        + "М и N также удаление слов той же части речи:");

//Выполнение метода 2.


  int max =wrdsSrtByPorog.getSize();

 LinkedList<words> FreqWrds = new LinkedList<>();
 LinkedList<sentences> FreqSnts = new LinkedList<>();
 //this.print("Progress of calculate 1st koef: % \n 0%");
 
 //tdhthjthd;
 //Выделение частей предложений мн и удал чр
  for(int i=0;i<max;i++)  {
  //    LinkedList<String> bufferSen=new LinkedList<>();
  //    sentences bufSnts=new sentences();
  //    System.out.println("A ");
   // sentInText.getSearchSentences(wrdsSrtByPorog.getWord(i),bufferSen );
      
simplesentences sentBuf1 = new simplesentences();
sentBuf1.clearSents();
sentBuf1.setSentences( this.allsents.MNtoSentencesLL(m,n,this.wrdsSrtByPorog.getWord(i)));

//rehyge;
//System.out.println(this.wrdsSrtByPorog.getWords());
System.out.println(
"Word:"+this.wrdsSrtByPorog.getWord(i)
+" sents:"+ this.allsents.MNtoSentencesLL(m,n,this.wrdsSrtByPorog.getWord(i))       
);

for(int k1=0;k1<sentBuf1.getSize();k1++){
   String FOW1=FormOfWord(this.wrdsSrtByPorog.getWord(i));
    if(!this.equals(FOW1,"Неиз")){
    LinkedList<String> buferWrds=new LinkedList<>();
    LinkedList<String> buferWrdsOut=new LinkedList<>();
this.wrdsSrtByPorog.copyLinkedList(sentBuf1.getWordsOfSentence(k1),buferWrds);
String sent1="";
for(int k2=0;k2<buferWrds.size();k2++){
     String wordOut=buferWrds.get(k2);
    String FOW2=FormOfWord(wordOut);
   
if(!this.equals(FOW1,FOW2)|this.equals(FOW2,"Неиз")){buferWrdsOut.add(wordOut );
   sent1=sent1+" "+wordOut;}
  }
sentBuf1.replaceSentence(sent1, k1);
} 
}
sentences senx =new sentences();
words wrdx = new words();
senx.clearSents();
senx.setSentence(sentBuf1.getAllSents());
FreqSnts.add(senx);
wrdx.clear();
wrdx.setWords(senx.wordsToList());
FreqWrds.add(wrdx);
}
  
     if (this.jCheckBox1.isSelected()){
         Timer tmrSave = new Timer();
         tmrSave.startMsec();
         this.print("Запись частей предложений зависимых от текста");
         for(int i=0;i<this.wrdsSrtByPorog.getSize();i++){
      String fileOut3=FileName.substring(0, FileName.length()-4)
                    +" "+this.wrdsSrtByPorog.getWord(i)
                    +" его предложения текста "
                    +FileName.substring( FileName.length()-4);
      File file3 = new File(fileOut3);
       file3.delete();
            
        for(int k=0;k<FreqSnts.get(i).getSize();k++){
            this.write(fileOut3,FreqSnts.get(i).getSentence(k)+"\n"
                     );
            }}
         tmrSave.stopMsec();
         this.print("Время на запись частей предложений зависимых от текста: "+tmrSave.getMsec());
  }
 
        Timer tmrSave = new Timer();
         tmrSave.startMsec();
  this.print("Начало расчета силы связи ");
 
  for(int i=0;i<this.wrdsSrtByPorog.getSize();i++){
         Double mainWord=0.0,secWord=0.0,allWordFreq=0.0;
         LinkedList<Double> wrdsFrq=new LinkedList<>();
         wrdsFrq.clear();
     for(int k1=0;k1<FreqWrds.get(i).getSize();k1++){
     Double frq=this.allwordscopy.calculateFreq(FreqWrds.get(i).getWord(k1));
     mainWord=mainWord+frq;
     }
     allWordFreq=allWordFreq+mainWord;
         
  for(int j=0;j<this.wrdsSrtByPorog.getSize();j++){
      
     if(i!=j){
      secWord=0.0;allWordFreq=mainWord;
     for(int k1=0;k1<FreqWrds.get(j).getSize();k1++){
         Double frq=this.allwordscopy.calculateFreq(FreqWrds.get(j).getWord(k1));
         allWordFreq=allWordFreq+frq;
    boolean flag=false;
    for(int k2=0;k2<FreqWrds.get(i).getSize();k2++){
        if(k1!=k2) 
        if(this.equals(FreqWrds.get(j).getWord(k1),FreqWrds.get(i).getWord(k2))) 
         {flag=true;}
    }
    if(flag){secWord=secWord+frq;
    flag=false;}
     }
     wrdsFrq.add((mainWord+secWord)/allWordFreq);
     //FreqWrds.get(j).setFreq(i, secWord);
     }
     }
  
  //this.print("size "+wrdsFrq.size());
    LinkedList<String> sortWrd=new LinkedList<>();
    LinkedList<String> sortPOS=new LinkedList<>();
    LinkedList<Double> sortFrq=new LinkedList<>();
    
String bPOS="",bWrd="";Double bFrq=0.0;
this.allwords.copyLinkedList(this.wrdsSrtByPorog.getWords(), sortWrd);
this.allwords.copyLinkedList(this.wrdsSrtByPorog.getWordsPOS(), sortPOS);
this.allwords.copyLinkedList(wrdsFrq, sortFrq);

int s1k=0,sk=0;
for (int s=0;s<sortFrq.size();s++){
    if(sk==i)sk++;
    s1k=0;
for (int s1=0;s1<sortFrq.size();s1++){
if(s1k==i) s1k++;
if(sortFrq.get(s)>sortFrq.get(s1)){
bFrq=sortFrq.get(s1);
sortFrq.set(s1,sortFrq.get(s));
sortFrq.set(s,bFrq);
bWrd=sortWrd.get(s1k);
sortWrd.set(s1k,sortWrd.get(sk));
sortWrd.set(sk,bWrd);
bPOS=sortPOS.get(s1k);
sortPOS.set(s1k,sortPOS.get(sk));
sortPOS.set(sk,bPOS);
}
s1k++;
}
sk++;
}

//sohranenie
       
      String fileOut3=FileName.substring(0, FileName.length()-4)
                    +" "+this.wrdsSrtByPorog.getWord(i)
                    +" СИЛА СВЯЗИ "
                    +FileName.substring( FileName.length()-4);
      File file3 = new File(fileOut3);
       file3.delete();
            
       int kz=0;
        for(int k=0;k<this.wrdsSrtByPorog.getSize();k++){
            
           if(k==i) kz++;
          if(k!=i&k<sortFrq.size()){
             kz++;}
         if(k<sortFrq.size()) 
            if (sortFrq.get(k)!=1.0 )  this.write(fileOut3,sortWrd.get(kz)+" "
                       +sortFrq.get(k)+" "
                    +sortPOS.get(kz)+"\n"
                     );
         //   System.out.println("i:"+i+" k:"+k+" kz:"+kz); 
        }
     
 }   
  tmrSave.stopMsec();
  this.print("Время на расчет силы связи и запись в файлы: "+tmrSave.getMsec());
  //for(int i=0;i<this.unicWords.getSize();i++){
  //unicWrdsFrq.add(this.allwords);
  //}
     
     
 // fevgeg;
  
tmr1.stopMsec();
this.print("Время на выполнение подсчета силы связи: "+tmr1.getMsec()+"c.");

} 

   public String getNormalText(String in){
String ret="";
 char[] baseSymbols = {
            'a','A','b','B','c','C','d','D','e','E','f','F',
             'g','G','h','H','i','I','j','J','k','K','l','L',
              'm','M','n','N','o','O','p','P','q','Q','r','R',
               's','S','t','T','u','U','v','V','w','W','x','X',
                'y','Y','z','Z','а','А','б','Б','в','В','г',
                 'Г','д','Д','е','Е','ё','Ё','ж','Ж','з','З','и',
                  'И','й','Й','к','К','л','Л','м','М','н','Н','о',
                   'О','п','П','р','Р','с','С','т','Т','у','У','ф',
                   'Ф','х','Х','ц','Ц','ч','Ч','ш','Ш','щ','Щ','ь',
                   'Ь','ъ','Ъ','ы','Ы','э','Э','ю','Ю','я','Я','?','!',' ','.'};

 
 for (int i=0;i<in.length();i++){
 for (int j=0;j<baseSymbols.length;j++){

 if(in.charAt(i)==baseSymbols[j]){
 ret=ret+baseSymbols[j];
 }
 }
 }
 //System.out.println("ret:"+ret);
return ret;
}    

     private boolean equals(String string1, String string2){
boolean ret=false;
    if (string1.length()==string2.length())
      if (string1.equalsIgnoreCase(string2)) ret=true;  
return ret;
}

public String stemm(String in) throws Throwable{
     String command="russian";

	Class stemClass = Class.forName("org.tartarus.snowball.ext." +
					command + "Stemmer");
        SnowballStemmer stemmer = (SnowballStemmer) stemClass.newInstance();

        stemmer.setCurrent(in);
        stemmer.stem();
      return  stemmer.getCurrent();
}

 public String NormalForm(String in) throws Throwable{
String ret=in;
boolean flagSt=false;
 StringBuilder buf = new StringBuilder();
 String buf1 =new String();
	 Ray r=new Ray();
        // r.
	 if (r.b()>0)
	 {
	try {
             r.a(in, buf);}
        catch(Exception ex){System.out.println("ERR LEMMAT:"+ex);};
		// System.out.println(buf.toString());
                // System.out.println(buf.length());
         String out="",bufer="";
         int start=0,stop=0;
         start=buf.indexOf("1)");
         if(start>0){
         bufer=buf.substring(start+2);
         stop=bufer.indexOf("(");
         //System.out.println(stop);
         out=buf.substring(start+2,start+2+stop-1);
         flagSt=true;
         ret=out;
	 }}
          else System.out.print("Loading failed with code="+r.b());
        // TODO code application logic here
         if ( flagSt==false){
             ret= this.stemm(in);}
         
        return ret;
    } 
public static String FormOfWord(String in){
String ret="Неиз";

 StringBuilder buf = new StringBuilder();
	 Ray r=new Ray();
	 if (r.b()>0)
	 {
	 r.a(in, buf);
         String out="",bufer="";
         int start=0,stop=0;
         start=buf.indexOf("(");
         if(start>0){
         bufer=buf.substring(start+1);
         stop=bufer.indexOf(".");
         if(stop>4|stop<0)stop=4;
         out=buf.substring(start+1,start+1+stop);
         ret=out;
	 }}
          else System.out.print("Loading failed with code="+r.b());
        // TODO code application logic here
        return ret;
    } 

public static String InfOfWord(String in){
String ret="Неиз";

 StringBuilder buf = new StringBuilder();
	 Ray r=new Ray();
	 if (r.b()>0)
	 {
	 r.a(in, buf);
         String out="",bufer="";
         int start=0,stop=0;
         start=buf.indexOf("(");
         if(start>0){
         bufer=buf.substring(start+1);
         stop=bufer.indexOf(")\n");
         out=buf.substring(start+1,start+1+stop);
         ret=out;
	 }}
          else System.out.print("Loading failed with code="+r.b());
        // TODO code application logic here
        return ret;
    } 

 public void write(String fileName, String text) {
    //Определяем файл
    File file = new File(fileName);
 
    try {
       // file.delete();
        //проверяем, что если файл не существует то создаем его
        if(!file.exists()){
            file.createNewFile();
        }
 
        //PrintWriter обеспечит возможности записи в файл
        FileWriter sw = new FileWriter(file,true);
 
        try {
            //Записываем текст у файл
             sw.write(text);
        } finally {
            //После чего мы должны закрыть файл
            //Иначе файл не запишется
            sw.close();
        }
     sw.close();   
    } catch(IOException e) {
        throw new RuntimeException(e);
    }
}
    /**
     * @param args the command line arguments
     */
    public void main() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SecondWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SecondWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SecondWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SecondWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
this.setVisible(true);

this.print(" Файл "+this.FileName+" выбран для обработки");  
if(this.metod==0){this.print("методом расчета силы связи,");}
if(this.metod==1){this.print("методом расчета силы связи с учетом частей речи,");}
if(this.flagLemma==true){this.print("с лемматизацией,");}
if(this.flagLemma==false){this.print("без лемматизации,");}
if(this.flagStem==true){this.print("со стеммингом,");}
if(this.flagStem==false){this.print("без стемминга,");}
if(this.flagPredloj==true){this.print("прогоном по всему предложению,");}
if(this.flagOknoMN==true){this.print("прогоном по промежутку "+
        this.m+" символов до слова, и "+this.n+" символов после,");}
if(this.flagStopSlova==true){this.print("с удалением стоп-слов из файла "+
        this.FileNameExeption+" ,");}
if(this.flagStopSlova==false){this.print("без удаления стоп слов,");}
if(this.flagNeu4it4R==true){this.print("не учитывая частей речи.");}
if(this.flagOpred4R==true){this.print("определяя части речи.");}
if(this.flagU4it4R==true){this.print("и учитывая части речи.");}

    }
     
public void copyLinkedList(LinkedList in,LinkedList out){
out.clear();
out.removeAll(out);
    for (int i=0;i<in.size();i++)
        out.add(in.get(i));
}
    
    public void print(String str){
      jEditorPane1.setText(jEditorPane1.getText()+str+"\n");
      System.out.println(str);
    }
    
    public void SetParamWindow(String FileName,
             String FileNameExeption,
                    boolean flagStem,
                    boolean flagLemma,
                    boolean flagStopSlova,
                    boolean flagPredloj,
                    boolean flagNeu4it4R,
                    boolean flagOpred4R,
                    boolean flagU4it4R,
                    boolean flagOknoMN,
                    int metod,
                    int m,
                    int n){
               
             this.FileName = FileName;
             this.FileNameExeption = FileNameExeption;
             this.flagStem=flagStem;
             this.flagLemma=flagLemma;
             this.flagStopSlova=flagStopSlova;
             this.flagPredloj=flagPredloj;
             this.flagNeu4it4R=flagNeu4it4R;
             this.flagOpred4R=flagOpred4R;
             this.flagU4it4R=flagU4it4R;
             this.flagOknoMN=flagOknoMN;
             this.metod=metod;
             this.m=m;
             this.n=n;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
